[tool.poetry]
name = "sqlalchemy-adapter"
version = "0.1.0"
description = "A simplified way to add database support to a project throught SQLAlchemy"
authors = ["Javier Valero Cejudo <javalce29@gmail.com>"]
readme = "README.md"
license = "MIT"

[tool.poetry.dependencies]
python = "^3.8"
sqlalchemy = "^2.0"


[tool.poetry.group.dev.dependencies]
black = "23.11.0"
mypy = "1.7.1"
ruff = "0.1.6"
pytest = "7.4.3"
coverage = "7.3.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120

[tool.mypy]
python_version = "3.8"
strict = true

[[tool.mypy.overrides]]
module = "sqlalchemy_adapter.tests.*"
ignore_missing_imports = true
check_untyped_defs = true

[tool.pytest.ini_options]
addopts = ["--strict-config", "--strict-markers"]
xfail_strict = true
junit_family = "xunit2"

[tool.coverage.run]
parallel = true
source = ["tests"]
context = '${CONTEXT}'

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"] # module imported but unused


[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
